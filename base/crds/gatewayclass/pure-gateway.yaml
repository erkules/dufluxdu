apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: manager
  name: puregw-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: endpointsliceshadows.puregw.epic-gateway.org
spec:
  group: puregw.epic-gateway.org
  names:
    kind: EndpointSliceShadow
    listKind: EndpointSliceShadowList
    plural: endpointsliceshadows
    shortNames:
    - epshadow
    - epshadows
    singular: endpointsliceshadow
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.epicConfigName
      name: Config Name
      type: string
    - jsonPath: .spec.epicLink
      name: EPIC Link
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: |-
          EndpointSliceShadow is a kludge because of a difference in the way
          that EndpointSlice works compared to basically every other k8s
          object. When you scale a service down to zero endpoints the
          EndpointSlice controller BLOWS AWAY THE SLICE ANNOTATIONS AND
          FINALIZERS. This is incredibly hostile, but when I opened an issue
          the devs doubled down and indicated that this was as intended.


          Since we can't mark the EndpointSlice in the usual way we have this
          "shadow" resource that holds the extra data that we need.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: EndpointSliceShadowSpec defines the desired state of EndpointSliceShadow
            properties:
              epicConfigName:
                description: |-
                  EPICConfigName is the name of the GatewayClassConfig that was
                  used to announce this slice to EPIC.
                type: string
              epicLink:
                description: EPICLink is this slice's URL on the EPIC system.
                type: string
              parentRoutes:
                description: |-
                  ParentRoutes provides an efficient way to link back to the
                  HTTPRoutes that reference this slice.
                items:
                  description: |-
                    ParentReference identifies an API object (usually a Gateway) that can be considered
                    a parent of this resource (usually a route). There are two kinds of parent resources
                    with "Core" support:


                    * Gateway (Gateway conformance profile)
                    * Service (Mesh conformance profile, experimental, ClusterIP Services only)


                    This API may be extended in the future to support additional kinds of parent
                    resources.


                    The API object must be valid in the cluster; the Group and Kind must
                    be registered in the cluster for this reference to be valid.
                  properties:
                    group:
                      default: gateway.networking.k8s.io
                      description: |-
                        Group is the group of the referent.
                        When unspecified, "gateway.networking.k8s.io" is inferred.
                        To set the core API group (such as for a "Service" kind referent),
                        Group must be explicitly set to "" (empty string).


                        Support: Core
                      maxLength: 253
                      pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                      type: string
                    kind:
                      default: Gateway
                      description: |-
                        Kind is kind of the referent.


                        There are two kinds of parent resources with "Core" support:


                        * Gateway (Gateway conformance profile)
                        * Service (Mesh conformance profile, experimental, ClusterIP Services only)


                        Support for other resources is Implementation-Specific.
                      maxLength: 63
                      minLength: 1
                      pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                      type: string
                    name:
                      description: |-
                        Name is the name of the referent.


                        Support: Core
                      maxLength: 253
                      minLength: 1
                      type: string
                    namespace:
                      description: |-
                        Namespace is the namespace of the referent. When unspecified, this refers
                        to the local namespace of the Route.


                        Note that there are specific rules for ParentRefs which cross namespace
                        boundaries. Cross-namespace references are only valid if they are explicitly
                        allowed by something in the namespace they are referring to. For example:
                        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
                        generic way to enable any other kind of cross-namespace reference.


                        <gateway:experimental:description>
                        ParentRefs from a Route to a Service in the same namespace are "producer"
                        routes, which apply default routing rules to inbound connections from
                        any namespace to the Service.


                        ParentRefs from a Route to a Service in a different namespace are
                        "consumer" routes, and these routing rules are only applied to outbound
                        connections originating from the same namespace as the Route, for which
                        the intended destination of the connections are a Service targeted as a
                        ParentRef of the Route.
                        </gateway:experimental:description>


                        Support: Core
                      maxLength: 63
                      minLength: 1
                      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                      type: string
                    port:
                      description: |-
                        Port is the network port this Route targets. It can be interpreted
                        differently based on the type of parent resource.


                        When the parent resource is a Gateway, this targets all listeners
                        listening on the specified port that also support this kind of Route(and
                        select this Route). It's not recommended to set `Port` unless the
                        networking behaviors specified in a Route must apply to a specific port
                        as opposed to a listener(s) whose port(s) may be changed. When both Port
                        and SectionName are specified, the name and port of the selected listener
                        must match both specified values.


                        <gateway:experimental:description>
                        When the parent resource is a Service, this targets a specific port in the
                        Service spec. When both Port (experimental) and SectionName are specified,
                        the name and port of the selected port must match both specified values.
                        </gateway:experimental:description>


                        Implementations MAY choose to support other parent resources.
                        Implementations supporting other types of parent resources MUST clearly
                        document how/if Port is interpreted.


                        For the purpose of status, an attachment is considered successful as
                        long as the parent resource accepts it partially. For example, Gateway
                        listeners can restrict which Routes can attach to them by Route kind,
                        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
                        from the referencing Route, the Route MUST be considered successfully
                        attached. If no Gateway listeners accept attachment from this Route,
                        the Route MUST be considered detached from the Gateway.


                        Support: Extended


                        <gateway:experimental>
                      format: int32
                      maximum: 65535
                      minimum: 1
                      type: integer
                    sectionName:
                      description: |-
                        SectionName is the name of a section within the target resource. In the
                        following resources, SectionName is interpreted as the following:


                        * Gateway: Listener Name. When both Port (experimental) and SectionName
                        are specified, the name and port of the selected listener must match
                        both specified values.
                        * Service: Port Name. When both Port (experimental) and SectionName
                        are specified, the name and port of the selected listener must match
                        both specified values. Note that attaching Routes to Services as Parents
                        is part of experimental Mesh support and is not supported for any other
                        purpose.


                        Implementations MAY choose to support attaching Routes to other resources.
                        If that is the case, they MUST clearly document how SectionName is
                        interpreted.


                        When unspecified (empty string), this will reference the entire resource.
                        For the purpose of status, an attachment is considered successful if at
                        least one section in the parent resource accepts it. For example, Gateway
                        listeners can restrict which Routes can attach to them by Route kind,
                        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
                        the referencing Route, the Route MUST be considered successfully
                        attached. If no Gateway listeners accept attachment from this Route, the
                        Route MUST be considered detached from the Gateway.


                        Support: Core
                      maxLength: 253
                      minLength: 1
                      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                      type: string
                  required:
                  - name
                  type: object
                type: array
            required:
            - epicConfigName
            - epicLink
            - parentRoutes
            type: object
          status:
            description: EndpointSliceShadowStatus defines the observed state of EndpointSliceShadow
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: gatewayclassconfigs.puregw.epic-gateway.org
spec:
  group: puregw.epic-gateway.org
  names:
    kind: GatewayClassConfig
    listKind: GatewayClassConfigList
    plural: gatewayclassconfigs
    singular: gatewayclassconfig
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: GatewayClassConfig is the Schema for the gatewayclassconfigs
          API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              GatewayClassConfigSpec configures the EPIC Gateway client.  It has
              two parts: one for communication with the EPIC server, and one for
              configuration of the TrueIngress components on the client
              cluster. For examples, see the "config/" directory in the PureGW
              source tree.
            properties:
              epic:
                description: |-
                  EPIC configures the allocator to work with the Acnodal Enterprise
                  Gateway.
                properties:
                  cluster-name:
                    default: pure-gateway
                    description: |-
                      ClusterName is used to tag resources on the EPIC server. It's
                      purely informative but it's helpful to have each client cluster
                      have a different name.
                    type: string
                  gateway-hostname:
                    type: string
                  gateway-template:
                    type: string
                  service-account:
                    type: string
                  service-key:
                    type: string
                  user-namespace:
                    type: string
                required:
                - gateway-hostname
                - gateway-template
                - service-account
                - service-key
                - user-namespace
                type: object
              trueIngress:
                description: |-
                  TrueIngress configures the announcers to announce service
                  addresses to the Acnodal Enterprise GateWay.
                properties:
                  decapAttachment:
                    description: |-
                      DecapAttachment configures how the agent will attach the Packet
                      Forwarding Components for packet decapsulation.
                    properties:
                      direction:
                        description: Direction is either "ingress" or "egress".
                        type: string
                      flags:
                        description: Flags configure the PFC component's behavior.
                        type: integer
                      interface:
                        description: Interface is the name of the interface.
                        type: string
                      qid:
                        description: QID is a magic parameter that the PFC needs.
                        type: integer
                    required:
                    - direction
                    - flags
                    - interface
                    - qid
                    type: object
                  encapAttachment:
                    description: |-
                      EncapAttachment configures how the agent will attach the Packet
                      Forwarding Components for packet encapsulation.
                    properties:
                      direction:
                        description: Direction is either "ingress" or "egress".
                        type: string
                      flags:
                        description: Flags configure the PFC component's behavior.
                        type: integer
                      interface:
                        description: Interface is the name of the interface.
                        type: string
                      qid:
                        description: QID is a magic parameter that the PFC needs.
                        type: integer
                    required:
                    - direction
                    - flags
                    - interface
                    - qid
                    type: object
                required:
                - decapAttachment
                - encapAttachment
                type: object
            required:
            - epic
            - trueIngress
            type: object
          status:
            description: GatewayClassConfigStatus defines the observed state of GatewayClassConfig
            properties:
              conditions:
                default:
                - lastTransitionTime: "1970-01-01T00:00:00Z"
                  message: Waiting for controller
                  reason: Waiting
                  status: Unknown
                  type: Accepted
                description: |-
                  Conditions is the current status from the controller for
                  this GatewayClassConfig.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                maxItems: 8
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: manager
  namespace: puregw-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leader-election-role
  namespace: puregw-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: manager-role
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices/finalizers
  verbs:
  - update
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - referencegrants
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - referencegrants/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - tcproutes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - tcproutes/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - tcproutes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - puregw.epic-gateway.org
  resources:
  - endpointsliceshadows
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - puregw.epic-gateway.org
  resources:
  - gatewayclassconfigs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - puregw.epic-gateway.org
  resources:
  - gatewayclassconfigs/finalizers
  verbs:
  - update
- apiGroups:
  - puregw.epic-gateway.org
  resources:
  - gatewayclassconfigs/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
  namespace: puregw-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
- kind: ServiceAccount
  name: manager
  namespace: puregw-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
- kind: ServiceAccount
  name: manager
  namespace: puregw-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: proxy-role
subjects:
- kind: ServiceAccount
  name: manager
  namespace: puregw-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 3ea9bd30.puregw.io
kind: ConfigMap
metadata:
  name: manager-config
  namespace: puregw-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: manager
  name: manager-metrics-service
  namespace: puregw-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: manager
  name: manager
  namespace: puregw-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: manager
  template:
    metadata:
      labels:
        control-plane: manager
    spec:
      containers:
      - args:
        - --leader-elect
        command:
        - /manager
        image: quay.io/epic-gateway/pure-gateway:v0.32.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
      serviceAccountName: manager
      terminationGracePeriodSeconds: 5
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    control-plane: agent
  name: agent
  namespace: puregw-system
spec:
  selector:
    matchLabels:
      control-plane: agent
  template:
    metadata:
      labels:
        control-plane: agent
    spec:
      containers:
      - command:
        - /agent
        env:
        - name: EPIC_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: quay.io/epic-gateway/pure-gateway:v0.32.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: agent
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            - SYS_ADMIN
            drop:
            - ALL
          privileged: true
          readOnlyRootFilesystem: false
      hostNetwork: true
      serviceAccountName: manager
      terminationGracePeriodSeconds: 5
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
